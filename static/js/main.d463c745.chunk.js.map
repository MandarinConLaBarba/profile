{"version":3,"sources":["BikeMandarin.png","CellMandarin.png","App.js","ColorPalettes.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","palette","colors","bgColors","Wrapper","styled","div","_templateObject","BikeBackdrop","_templateObject2","BikeImage","H1","h1","_templateObject3","TextRight","_templateObject4","_templateObject5","MandarinFaceImage","img","_templateObject6","App","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","href","style","textAlign","src","FaceImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,osCCQxC,IAAMC,ECLiB,CACrBC,OAAY,CACV,SACA,SACA,SACA,UAEFC,SAAU,CACR,SACA,SACA,SACA,WDJEC,EAAUC,IAAOC,IAAVC,IAECN,EAAQC,OAAO,IAKvBM,EAAeH,IAAOC,IAAVG,IACQC,KASpBC,EAAKN,IAAOO,GAAVC,KAcFC,GARWT,IAAOC,IAAVS,KAQIV,IAAOC,IAAVU,MAmBTC,EAAoBZ,IAAOa,IAAVC,KAsFRC,cAxEb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAEZH,0EAON,OACEO,EAAAC,EAAAC,cAAC1B,EAAD,KACEwB,EAAAC,EAAAC,cAACtB,EAAD,MAEAoB,EAAAC,EAAAC,cAAChB,EAAD,KAEEc,EAAAC,EAAAC,cAACnB,EAAD,cAEAiB,EAAAC,EAAAC,cAAA,mCAJF,kBAImDF,EAAAC,EAAAC,cAAA,0BAJnD,QAIiFF,EAAAC,EAAAC,cAAA,qCAJjF,2PAOwBF,EAAAC,EAAAC,cAAA,wBAPxB,QAOoDF,EAAAC,EAAAC,cAAA,2BAPpD,+PAS+EF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,qBAAR,UAT/E,IAWEH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,mDAdF,iDAgBEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAjBF,8LAsBiBF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,sCAAR,kCAtBjB,yMA0BiBH,EAAAC,EAAAC,cAAA,KAAGC,KAAK,qDAAR,uBA1BjB,IA2BEH,EAAAC,EAAAC,cAAA,2CAEAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WA9BF,6eAsCEF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,uGAEAF,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,UAAW,WACtBL,EAAAC,EAAAC,cAACb,EAAD,CAAmBiB,IAAKC,gBA5DlBC,aE5DEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d463c745.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BikeMandarin.3eec3b29.png\";","module.exports = __webpack_public_path__ + \"static/media/CellMandarin.6c8ae083.png\";","import React, { Component } from 'react';\nimport styled from 'styled-components'\n\nimport { Orangey, DarkSky } from './ColorPalettes'\n\nimport BikeImage from './BikeMandarin.png';\nimport FaceImage from './CellMandarin.png';\n\nconst palette = Orangey;\n\nconst Wrapper = styled.div`\n  a {\n    color: #${palette.colors[2]};\n  }\n\n`\n\nconst BikeBackdrop = styled.div`\n  background-image: url(${BikeImage});\n  background-repeat: no-repeat;\n  position: fixed;\n  top: 3vh;\n  height: 100%;\n  width: 100%;\n  opacity: .5;\n\n`\nconst H1 = styled.h1`\n\n  font-size: 32px;\n\n`\n\nconst TextName = styled.div`\n  position: absolute;\n  top: 2vh;\n  right: 10vw;\n  color: grey;\n\n`\n\nconst TextRight = styled.div`\n\n  position: absolute;\n  right: 10vw;\n  top: 10vh;\n  width: 25vw;\n  @media (max-width: 1000px) {\n    width: 60vw;\n  }\n\n  @media (max-width: 700px) {\n    width: 80vw;\n  }\n  text-align: justify;\n  line-height: 35px;\n\n\n`;\n\nconst MandarinFaceImage = styled.img`\n\n  width: 200px\n\n`\n\n\n\n\n/**\n * App component\n */\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n\n  }\n\n  render() {\n\n    return (\n      <Wrapper>\n        <BikeBackdrop />\n\n        <TextRight>\n\n          <H1>About</H1>\n\n          <strong>Mandarin Drummond</strong> is a software <strong>engineer</strong> and <strong>solutions architect</strong> with a focus in the JavaScript ecosystem.\n          He has over 15 years experience in building software systems and applications.\n          While he has broad knowledge of various specific technologies and platforms, he believes more important\n          than minutiae are the <strong>habits</strong> and <strong>instincts</strong> as a systems architect he has developed over the years.\n          Over the course of his career he has learned what his strengths are and how to utilize time and resources effectively\n          in order to achieve positive results. Mandarin is currently serving as CTO @ <a href=\"https://shoflo.tv\">Shoflo</a>.\n\n          <br />\n          <br />\n\n          <strong>Want to build something together?</strong> Instagram: https://www.instagram.com/mndrin_.\n\n          <br />\n          <br />\n\n\n          He believes a person's efficacy is correlated to their habits and values.\n          He believes that less is more. He believes in failing fast and establishing rapid feedback loops.\n          He believes in <a href=\"https://en.wikipedia.org/wiki/ROWE\">Results Only Work Environments</a>.\n          He believes in automation and dislikes manual repetition.\n          He believes email is for the most part counterproductive.\n          He believes in small and diverse teams. He believes in fairness.\n          He believes in <a href=\"https://es.wikiquote.org/wiki/Los_cuatro_acuerdos\">Los Cuatro Acuerdos</a>.\n          <em> Haz lo m√°ximo que puedas.</em>\n\n          <br />\n          <br />\n\n          Mandarin is many things. He's a father of two. He's a son and brother.\n          He enjoys working on his multilingualism, staying informed in current affairs, travelling and riding bikes.\n          He enjoys spending time in coffee shops and has visited almost every locally-owned cafe in Oklahoma city. He maintains a\n          grateful and positive perspective on life. He speaks Spanish and English fluently.\n          He enjoys graphic design and product development. He enjoys reading and learning about history and culture.\n\n          <br />\n          <br />\n\n\n          <em>Go confidently in the direction of your dreams! Live the life you've imagined. -- Thoreau</em>\n\n          <div style={{textAlign: 'center'}}>\n            <MandarinFaceImage src={FaceImage} />\n          </div>\n\n\n\n\n        </TextRight>\n      </Wrapper>\n    )\n\n  }\n\n}\n\nexport default App;\n\n","\n\n\nexport const Orangey = {\n  colors:     [\n    \"fff4e3\",\n    \"ffcdab\",\n    \"ffa45c\",\n    \"5d5d5a\"\n  ],\n  bgColors: [\n    \"ffa45c\",\n    \"fff4e3\",\n    \"5d5d5a\",\n    \"ffcdab\",\n  ]\n}\n\nexport const DarkSky = {\n  colors: [\n    \"dfe2e2\",\n    \"dfe2e2\",\n    \"738598\",\n    \"dfe2e2\",\n  ],\n  bgColors: [\n    \"3c415e\",\n    \"738598\",\n    \"dfe2e2\",\n    \"1cb3c8\"\n  ]\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}